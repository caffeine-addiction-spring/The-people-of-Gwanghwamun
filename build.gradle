plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.caffeine'
version = '0.0.1-SNAPSHOT'
description = 'gwanghwamun'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // SpringBoot
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //AWS
    implementation 'software.amazon.awssdk:s3:2.20.162'
    implementation 'software.amazon.awssdk:auth:2.20.162'

    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'

    // Database
    runtimeOnly 'org.postgresql:postgresql'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'

    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.0'

}

spotless {
    java {
        googleJavaFormat("1.17.0")
        indentWithTabs(2)
        endWithNewline()
        removeUnusedImports()
        trimTrailingWhitespace()
        target("src/*/java/**/*.java")
    }

    format("misc") {
        target("**/*.gradle.kts", "**/*.md", "**/.gitignore")
        targetExclude(".release/*.*")
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('jar') {
    enabled = false
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}
